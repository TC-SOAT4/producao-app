# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - main

jobs:

  test:
     name: Test
     runs-on: ubuntu-latest
     permissions:
      contents: read
      packages: write

     steps:
     - uses: actions/checkout@v3
     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
         server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
         settings-path: ${{ github.workspace }} # location for the settings.xml file

     - name: Test
       run: mvn --batch-mode -Dmaven.test.failure.ignore=true test

  sonarcloud:
  
    name: SonarCloud
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage
        env:
          # Needed to get some information about the pull request, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
   
       
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: sonarcloud
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Temporarily save jar artifact
      uses: actions/upload-artifact@master
      with:
        name: jar-artifact
        path: ${{ github.workspace }}/target/*.jar
        
  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: build
    
    steps:

    - uses: actions/checkout@v3

    - uses: actions/download-artifact@master
      with:
        name: jar-artifact
        path: target/
         
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/producao-app:latest
  
  # eks:
    
  #   name: EKS - Deployment
  #   runs-on: ubuntu-latest
  #   needs: docker

  #   steps:

  #   - name: Set short git commit SHA
  #     id: commit
  #     uses: prompt/actions-commit-hash@v2

  #   - name: Check out code
  #     uses: actions/checkout@v2
    
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1

  #   - name: Update kube config
  #     run: aws eks update-kubeconfig --name tr-lanchonete-eks-JuDwQX65 --region us-east-1

  #   - name: Deploy to EKS
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
  #       IMAGE_TAG: ${{ steps.commit.outputs.short }}
  #     run: |
  #       "k8s/1-configmap-app.yaml" && \
  #       kubectl apply -f "k8s/2-deployment-app.yaml"
  #       kubectl apply -f "k8s/3-svc-app.yaml"


